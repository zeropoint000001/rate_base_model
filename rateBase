import numpy as np

class rateBase:
  def __init__(self, n_per, 
               init_bal, 
               init_gross_plant,
               init_net_plant,
               useful_life,
               retirements, 
               equity_pct, 
               k_equity, 
               k_debt, 
               t_construct, 
               capex_forecast):
    import numpy as np
    
    # *** ERROR HANDLING - check the shape of inputs
    
    runlog = "Initialized a rate base model of %d" % n_per +" periods with an initial balance of %d" % init_bal + "\n"
    runlog += "\nRetirements of initial plant enetered for %d " % len(retirements) + " periods\n"+ str(retirements) + "\n"
    runlog += "\nCapex forecast entered for %d" % len(capex_forecast) + " periods\n" + str(capex_forecast) + "\n"
    runlog += "\nEquity capitalization entered for %d" % len(equity_pct) + " periods\n" + str(equity_pct) + "\n"
    runlog += "\nCost of equity entered for %d" % len(k_equity) + " periods\n" + str(k_equity) + "\n"
    runlog += "\nCost of debt entered for %d" % len(k_debt) + " periods\n" + str(k_debt) + "\n"
    runlog += "\nAvg construction time forecast entered for %d" % len(t_construct) + " periods\n" + str(t_construct) + "\n"
    
    def _vectorize(self, x):
      if np.isscalar(x) == True:
        return self.zeros + x
      else:
        return x      

    # initialize objects
    self.pers = tuple(np.arange(0,n_per))
    self.pers_one = tuple(np.arange(1,n_per))
    self.pers_one_minus_one = tuple(np.arange(1,n_per-1))
    
    self.period, self.zeros = np.arange(n_per), np.zeros(n_per)
    self.value_bop, self.capex, self.rate_base = np.zeros(n_per), np.zeros(n_per), np.zeros(n_per)
    self.legacy_plant_bop, self.legacy_plant_eop, self.legacy_dep = np.zeros(n_per), np.zeros(n_per), np.zeros(n_per)
    self.afudc, self.afudc_e, self.afudc_d = np.zeros(n_per), np.zeros(n_per), np.zeros(n_per)

    self.value_bop[0] = init_bal
    self.retirements = retirements
    self.equity_pct = _vectorize(self, equity_pct)
    self.k_equity = _vectorize(self, k_equity)
    self.k_debt = _vectorize(self, k_debt)
    self.t_construct = _vectorize(self, t_construct)
    self.capex = capex_forecast
            
    # calculate AFUDC
    for i in self.pers:
        self.afudc_e[i] = self.capex[i] * self.equity_pct[i] * self.t_construct[i] * self.k_equity[i]
        self.afudc_d[i] = self.capex[i] * ( 1 - self.equity_pct[i]) * self.t_construct[i] * self.k_debt[i]
        self.afudc[i] = self.afudc_e[i] + self.afudc_d[i]
    
    # calculate legacy plant
    self.legacy_plant_bop[0] = init_gross_plant
    self.legacy_plant_eop[0] = init_gross_plant - self.retirements[0]
    for i in self.pers_one:
        self.legacy_plant_bop[i] = self.legacy_plant_eop[i-1] 
        self.legacy_plant_eop[i] = self.legacy_plant_bop[i] - self.retirements[i]
        
    # calculate depreciation
    for i in self.pers:
        self.legacy_dep[i] = ((self.legacy_plant_bop[i] + self.legacy_plant_eop[i])/2) * 1/useful_life
    
      
    # calculate rate base
    self.rate_base[0] = self.value_bop[0] + self.capex[0] + self.afudc[0]
    for i in self.pers_one:
        self.rate_base[i] = self.rate_base[i-1] + self.capex[i] + self.afudc[i]
    
    print(runlog)
    
print(rateBase(n_per = 10, 
               init_bal = 5,
               init_gross_plant = 10,
               init_net_plant = 5,
               useful_life = 40,
               retirements = [.11, .11, .11, .11, .11, .11, .11, .11, .11, .11],
               capex_forecast = [.25, .25, .25, .25, .25, .25, .25, .25, .25, .25], 
               equity_pct = [.45, .45, .45, .45, .45, .45, .45, .45, .45, .45], 
               k_equity = [.1, .1, .1, .1, .1, .1, .1, .1, .1, .1], 
               k_debt = [.035, .035, .035, .035, .055, .055, .055, .035, .035, .035], 
               t_construct = [.5, .5, .5, .5, .5, .5, .5, .5, .5, .5]).legacy_dep)   


#print(rateBase(10, 5, .05, .45, .1, .035, .5).capex) 
#print(rateBase(10, 5, .05, .45, .1, .035, .5).afudc)
