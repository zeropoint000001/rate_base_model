# TAX DEPRECIATION
# ----------------------------------------------------------------------------------------------------------------------------------
#
# inteded as an approximation of macrs as represented by the IRS here https://www.irs.gov/publications/p946
# return an estimate of the macrs depreciation for a given useful life
# the macrs formula takes four arguments -- useful_life, first_year_fraction, bonus, and year
#    useful_life: useful life of the asset -- integer (between 3 and 40)
#    first_year_fraction: portion of first year during which the asset was in service -- float (between 0 and 1)
#    bonus_depreciation: deduction taken in first year -- float (between 0 and 1)
#    year: year index for which to return -- integer (between 0 and useful_life), if 0 then the full macrs vector is returned
#
# EXAMPLE: macrs(20, .5, .5, 1) returns the first year's depreciation for an asset of 20 yrs useful life 
#          placed in service mid-year with 50% bonus depreciation
# EXAMPLE: macrs(20, .5, .5, 1) returns the entire depreciation vector for an asset of 20 yrs useful life 
#          placed in service mid-year with 50% bonus depreciation

def macrs(useful_life, first_year_fraction, bonus, year):
    import numpy as np
    ul, fyf, yr, b = useful_life, first_year_fraction, year, bonus
    t = np.arange(0,ul+1)
    np, ddd, sld, ed, md = [], [], [], [], []
    np.append(1*(1-b))
 
    for i in t:
        ddd.append(2*np[i]/ul)
 
        if i < ul:
            sld.append(np[i]/(ul-i))
        else:
            sld.append(0)
 
        y = ddd[i] if ddd[i] >= sld[i] else sld[i]
        ed.append(y)
        np_next = np[i] - ed[i]
        np.append(np_next)
 
        if i == 0:
            md.append(0+fyf*ed[i])
        else:
            md.append((1-fyf)*ed[i-1]+fyf*ed[i])
            
    md[0] = md[0] + b
 
    if yr == 0:
        return md
    else:
        return md[yr-1]
        

# ----------------------------------------------------------------------------------------------------------------------------------
# BOOK DEPRECIATION
# ----------------------------------------------------------------------------------------------------------------------------------
# return the straight-line depreciation for a given useful life
# the straight_line formula takes three arguments -- useful_life, first_year_fraction, and year
#    useful_life: useful life of the asset -- integer (between 3 and 40)
#    first_year_fraction: portion of first year during which the asset was in service -- float (between 0 and 1)
#    year: year index for which to return -- integer (between 0 and useful_life), if 0 then the full macrs vector is returned
#
# EXAMPLE: straight_line(20, .5, 1) returns the first year's depreciation for an asset of 20 yrs useful life place in service mid-year
# EXAMPLE: straight_line(20, .5, 0) returns the entire depreciation vector for an asset of 20 yrs useful life place in service mid-year

def straight_line(useful_life, first_year_fraction, year):
    import numpy as np
    ul, fyf, yr = useful_life, first_year_fraction, year
    
    np = np.repeat(1,ul+1)
    np = np/ul
    np[0] = np[0]*fyf
    np[ul] = np[ul]*(1-fyf)
 
    if yr == 0:
        return np
    else:
        return np[year-1]
        
# ----------------------------------------------------------------------------------------------------------------------------------
# DEFERRED TAXES
# ----------------------------------------------------------------------------------------------------------------------------------

def deferred_taxes(useful_life, first_year_fraction, bonus, tr, year):
    ul, fyf, b, yr = useful_life, first_year_fraction, bonus, year
    dt = (macrs(ul, fyf, b, 0) - straight_line(ul, fyf, 0)) * tr 
    if yr == 0:
        return dt 
    else:
        return dt[yr-1]

# ----------------------------------------------------------------------------------------------------------------------------------
# RATE BASE CLASS
# ----------------------------------------------------------------------------------------------------------------------------------

class rateBase:
  def __init__(self, n_per, 
               allowance, 
               hist_per,
               tax_rate_hist,
               tax_rate_fwd,
               bonus_dep_hist,
               bonus_dep_fwd,
               init_bal, 
               init_gross_plant,
               useful_life,
               equity_pct, 
               k_equity, 
               k_debt, 
               t_construct, 
               capex_forecast,
               dep_fyf):
    
    import numpy as np
    import pandas as pd
    
    # *** ERROR HANDLING - check the shape of inputs
    
    def _vectorize(self, x):
      if np.isscalar(x) == True:
        return self.zeros + x
      else:
        return x 
    
    def build_matrix(self, past, fwd, n_per_back, n_per_fwd):
        from numpy import arange
        pm = np.zeros([n_per_back + n_per_fwd, n_per+1])
        
        for i in arange(0, len(past)):
            pm[i, 0] = past[i]
            
        for j in arange(1,n_per_fwd+1):
            for i in arange(0, n_per_back + n_per_fwd):
                if i == 0 and j > 0:
                    pm[i][j] = fwd[j-1]
                else:
                    pm[i][j] = pm[i-1][j-1]
        return pm
        
    # initialize objects
    self.pers = tuple(np.arange(0,n_per))
    self.persp = tuple(np.arange(0,n_per+1))
    self.pers_one = tuple(np.arange(1,n_per))
    self.persp_one = tuple(np.arange(1,n_per+1))
    self.pers_one_minus_one = tuple(np.arange(1,n_per-1))
    
    self.period, self.zeros = np.arange(n_per), np.zeros(n_per)
    self.value_bop, self.capex, self.rate_base = np.zeros(n_per), np.zeros(n_per), np.zeros(n_per+1)
    self.legacy_plant_bop, self.legacy_plant_eop, self.legacy_dep = np.zeros(n_per), np.zeros(n_per), np.zeros(n_per)
    self.afudc, self.afudc_e, self.afudc_d = np.zeros(n_per), np.zeros(n_per), np.zeros(n_per)

    # calculate legacy plant
    self.pac_eop = build_matrix(self, init_gross_plant, capex_forecast, hist_per, n_per)
    
    # calculate bonus matrix
    self.tax_rate = build_matrix(self, tax_rate_hist, tax_rate_fwd, hist_per, n_per)
    
    # calculate tax matrix
    self.bonus_dep = build_matrix(self, bonus_dep_hist, bonus_dep_fwd, hist_per, n_per)
    
    runlog = "Initialized a rate base model of %d" % n_per +" periods with an initial balance of %d" % init_bal + "\n"
    runlog += "\nPlant at cost entered in %d" % len(init_gross_plant) + " age buckets\n" + str(init_gross_plant) + "\n"
    runlog += "\nCapex forecast entered for %d" % len(capex_forecast) + " periods\n" + str(capex_forecast) + "\n"
    runlog += "\nEquity capitalization entered for %d" % len(equity_pct) + " periods\n" + str(equity_pct) + "\n"
    runlog += "\nCost of equity entered for %d" % len(k_equity) + " periods\n" + str(k_equity) + "\n"
    runlog += "\nCost of debt entered for %d" % len(k_debt) + " periods\n" + str(k_debt) + "\n"
    runlog += "\nAvg construction time forecast entered for %d" % len(t_construct) + " periods\n" + str(t_construct) + "\n"
    runlog += "\nPlant at cost computed across the forecast period, from initial balance to final period eop:\n" + str(self.pac_eop)
    
    self.gross_plant = np.zeros(n_per + 1)
    for i in self.persp:
        self.gross_plant[i] = sum(self.pac_eop[:,i])
    
    self.dep_exp_book = np.zeros(n_per + 1)
    for j in self.persp:
        i = 0
        for c in self.pac_eop[:,j]:
            self.dep_exp_book[j] += straight_line(useful_life, dep_fyf, i+1) * c
            i += 1
            
    self.dep_acc_book = np.zeros(n_per + 1)
    for j in self.persp:
        i = 0
        for c in self.pac_eop[:,j]:
            for t in np.arange(1, i + 2):
                self.dep_acc_book[j] += straight_line(useful_life, dep_fyf, t) * c
            i += 1
    
    self.dep_exp_tax = np.zeros(n_per + 1)
    for j in self.persp:
        i = 0
        for c in self.pac_eop[:,j]:
            self.dep_exp_tax[j] += macrs(useful_life, dep_fyf, self.bonus_dep[i, j], i+1) * c
            i += 1
            
    self.dep_acc_tax = np.zeros(n_per + 1)
    for j in self.persp:
        i = 0
        for c in self.pac_eop[:,j]:
            for t in np.arange(1, i + 2):
                self.dep_acc_tax[j] += macrs(useful_life, dep_fyf, self.bonus_dep[i, j], t) * c
            i += 1
            
    self.adit = np.zeros(n_per + 1)
    for j in self.persp:
        i = 0
        for c in self.pac_eop[:,j]:
            for t in np.arange(1, i + 2):
                self.adit[j] += (macrs(useful_life, dep_fyf, self.bonus_dep[i, j], t) 
                                         - straight_line(useful_life, dep_fyf, t)) * c * self.tax_rate[i, j]
            i += 1
            
    self.value_bop[0] = init_bal
    self.equity_pct = _vectorize(self, equity_pct)
    self.k_equity = _vectorize(self, k_equity)
    self.k_debt = _vectorize(self, k_debt)
    self.t_construct = _vectorize(self, t_construct)
    self.capex = capex_forecast
            
    for i in self.persp:
        self.rate_base[i] = self.gross_plant[i] - self.dep_acc_book[i] - self.adit[i]
    
    #print(runlog)
    
    self.dict = {"gross_plant": self.gross_plant, 
                 "acc_dep": self.dep_acc_book, 
                 "net plant": self.gross_plant - self.dep_acc_book,
                 "adit": self.adit, 
                 "rate base": self.rate_base}
    
    self.df = pd.DataFrame(self.dict, columns = self.dict.keys())
    
rb = rateBase(n_per = 10,
              allowance = 0,
              hist_per = 20,
              tax_rate_hist = [.35, .35, .35, .35, .35, .35, .35, .35, .35, .35, .35, .35, .35, .35, .35, .35],
              tax_rate_fwd = [.35, .2, .2, .2, .2, .2, .2, .2, .2, .2, .2],
              bonus_dep_hist = [.6, .7, .7, 0],
              bonus_dep_fwd = [.5, .4, .3, 0, 0, 0, 0, 0, 0, 0, 0], 
              init_bal = 5,
              init_gross_plant = [39,40,40,40,40,40,41,40,40,40,40,40,40,40,40,40],
              capex_forecast = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40], 
              useful_life = 40,
              equity_pct = [.45, .45, .45, .45, .45, .45, .45, .45, .45, .45],
              k_equity = [.1, .1, .1, .1, .1, .1, .1, .1, .1, .1],
              k_debt = [.035, .035, .035, .035, .055, .055, .055, .035, .035, .035],
              t_construct = [.5, .5, .5, .5, .5, .5, .5, .5, .5, .5],
              dep_fyf = .5)

#print(rb.df)
